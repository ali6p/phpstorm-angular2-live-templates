<templateSet group="Angular2-ali6p">
  <template name="i1" value="i18n" description="i18n" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="ali2-module" value="import {NgModule}            from '@angular/core';&#10;import {CommonModule}        from '@angular/common';&#10;import {FormsModule}         from '@angular/forms';&#10;&#10;import {$COMPONENT_NAME$Component}       from './$COMPONENT_FILE_NAME$.component';&#10;import {$COMPONENT_NAME$ListComponent}   from './$COMPONENT_FILE_NAME$-list.component';&#10;import {$COMPONENT_NAME$RoutingModule}   from './$COMPONENT_FILE_NAME$-routing.module';&#10;import {$COMPONENT_NAME$AddNewComponent} from &quot;./$COMPONENT_FILE_NAME$-add-new.component&quot;;&#10;&#10;@NgModule({&#10;    imports: [CommonModule, FormsModule, $COMPONENT_NAME$RoutingModule],&#10;    declarations: [&#10;        $COMPONENT_NAME$Component, $COMPONENT_NAME$ListComponent, $COMPONENT_NAME$AddNewComponent&#10;    ]&#10;})&#10;export class $COMPONENT_NAME$Module {&#10;}$END$" description="Sub module: x.module.ts" toReformat="false" toShortenFQNames="true">
    <variable name="COMPONENT_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="COMPONENT_FILE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ali2-maincomp" value="import { Component }   from '@angular/core';&#10;&#10;import { $COMPONENT_NAME$Service } from './$COMPONENT_FILE_NAME$.service';&#10;&#10;@Component({&#10;  moduleId: module.id,&#10;  templateUrl: '$COMPONENT_FILE_NAME$.component.html',&#10;  providers: [ $COMPONENT_NAME$Service ]&#10;})&#10;export class $COMPONENT_NAME$Component {&#10;}$END$" description="Main Component: x.component.ts" toReformat="false" toShortenFQNames="true">
    <variable name="COMPONENT_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="COMPONENT_FILE_NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ali2-service" value="import {Injectable} from '@angular/core';&#10;import {Http} from &quot;@angular/http&quot;;&#10;import {LoginService} from &quot;../login/login.service&quot;;&#10;&#10;export class $CN$ {&#10;    constructor(public name: string, &#10;                public id?: number&#10;                ) {&#10;    }&#10;}&#10;&#10;@Injectable()&#10;export class $CN$Service {&#10;&#10;    constructor(private http: Http, private loginService: LoginService) {&#10;    }&#10;&#10;    get$CN$s() {&#10;        return this.http.get(this.loginService.apiPath + '$CFN$', this.loginService.createHeader())&#10;            .map(response =&gt; { &#10;                if(response.status==200) return response.json() &#10;            }).catch(err =&gt; this.loginService.handleServiceErrors(err, []))&#10;    }&#10;&#10;    get$CN$(id: number | string) {&#10;        return this.http.get(this.loginService.apiPath + '$CFN$/' + id, this.loginService.createHeader())&#10;            .map(response =&gt; response.json()).catch(err =&gt; this.loginService.handleServiceErrors(err))&#10;    }&#10;&#10;    create$CN$(body) {&#10;        return this.http.post(this.loginService.apiPath + '$CFN$', body, this.loginService.createHeader())&#10;            .map(response =&gt; response.json()).catch(err =&gt; this.loginService.handleServiceErrors(err))&#10;    }&#10;&#10;    update$CN$(body, id: number | string) {&#10;        return this.http.put(this.loginService.apiPath + '$CFN$/' + id, body, this.loginService.createHeader())&#10;            .catch(err =&gt; this.loginService.handleServiceErrors(err))&#10;    }&#10;&#10;    update$CN$Status(body, id: number | string) {&#10;        return this.http.patch(this.loginService.apiPath + '$CFN$/' + id + '/changestatus', body, this.loginService.createHeader())&#10;    }&#10;    &#10;    delete$CN$(id: number | string) {&#10;        return this.http.delete(this.loginService.apiPath + '$CFN$/' + id, this.loginService.createHeader())&#10;    }&#10;&#10;}" description="Sub Service: x.service.ts" toReformat="false" toShortenFQNames="true">
    <variable name="CN" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CFN" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ali2-routing" value="import {NgModule}     from '@angular/core';&#10;import {&#10;    Routes,&#10;    RouterModule&#10;} from '@angular/router';&#10;&#10;import {$CN$Component}       from './$CFN$.component';&#10;import {$CN$ListComponent}   from './$CFN$-list.component';&#10;import {$CN$AddNewComponent} from &quot;./$CFN$-add-new.component&quot;;&#10;&#10;const routes: Routes = [&#10;    {&#10;        path: '',&#10;        component: $CN$Component,&#10;        children: [&#10;            {path: '', redirectTo: 'list', pathMatch: 'full'},&#10;            {path: 'list', component: $CN$ListComponent},&#10;            {path: 'add-new', component: $CN$AddNewComponent},&#10;            {path: 'add-new/:id', component: $CN$AddNewComponent}&#10;        ]&#10;    }&#10;];&#10;&#10;@NgModule({&#10;    imports: [RouterModule.forChild(routes)],&#10;    exports: [RouterModule]&#10;})&#10;export class $CN$RoutingModule {&#10;}$END$" description="Sub Routing: x-routing.module.ts" toReformat="false" toShortenFQNames="true">
    <variable name="CN" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CFN" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ali2-add-new-comp" value="import {Component, OnInit} from '@angular/core';&#10;import {$CN$Service, $CN$} from &quot;./$CFN$.service&quot;;&#10;import {ActivatedRoute, Router} from &quot;@angular/router&quot;;&#10;import {Location} from &quot;@angular/common&quot;;&#10;&#10;declare var UIToastr, Spinner: any;&#10;&#10;@Component({&#10;    moduleId: module.id,&#10;    templateUrl: '$CFN$-add-new.component.html'&#10;})&#10;export class $CN$AddNewComponent implements OnInit {&#10;&#10;    submitted = false;&#10;    active = true;&#10;    $CMN$Model: $CN$;&#10;&#10;    constructor(private route: ActivatedRoute,&#10;                private router: Router,&#10;                private $CMN$Service: $CN$Service,&#10;                private location: Location) {&#10;    }&#10;    &#10;    ngOnInit() {&#10;        this.newForm();&#10;        &#10;        let id = parseInt(this.route.snapshot.params['id'], 10) || 0;&#10;        if (id &gt; 0) {&#10;            this.get$CN$Detail(id);&#10;        }&#10;    }&#10;    &#10;    ngAfterViewInit() {&#10;        this.submitted = false;&#10;    }&#10;&#10;    newForm() {&#10;        this.$CMN$Model = new $CN$('');&#10;        // this.active = false;&#10;        // setTimeout(()=&gt;this.active = true, 0);&#10;    }&#10;&#10;&#10;    onSubmitNew() {&#10;        console.log(this.$CMN$Model);&#10;        this.submitTrue();&#10;&#10;        if (this.$CMN$Model.id &gt; 0) {&#10;            this.$CMN$Service.update$CN$(this.$CMN$Model, this.$CMN$Model.id).subscribe(&#10;                response =&gt; {&#10;                    UIToastr.ok(null, 'OK');&#10;                    this.router.navigate(['$CFN$s/list']);&#10;                },&#10;                _ =&gt; {},&#10;                () =&gt; this.submitFalse()&#10;            );&#10;        } else {&#10;            this.$CMN$Service.create$CN$(this.$CMN$Model).subscribe(&#10;                response =&gt; {&#10;                    UIToastr.ok(null, 'OK');&#10;                    this.newForm();&#10;                },&#10;                _ =&gt; {},&#10;                () =&gt; this.submitFalse()&#10;            );&#10;        }&#10;    }&#10;&#10;    private submitTrue() {&#10;        this.submitted = true;&#10;        Spinner.show();&#10;&#10;    }&#10;&#10;    private submitFalse() {&#10;        this.submitted = false;&#10;        Spinner.hide();&#10;    }&#10;&#10;    get$CN$Detail(id: number) {&#10;        this.active = false;&#10;        Spinner.show();&#10;        this.$CMN$Service.get$CN$(id).subscribe(&#10;            response =&gt; {&#10;                console.log(response);&#10;                this.$CMN$Model = response;&#10;                this.active = true;&#10;                // setTimeout(()=&gt;this.active = true, 0);&#10;            },&#10;            _ =&gt; {},&#10;            () =&gt; Spinner.hide()&#10;        );&#10;    }&#10;&#10;    goBack(): void {&#10;        this.location.back();&#10;    }&#10;}$END$" description="Add-New Component: x-add-new.component.ts" toReformat="false" toShortenFQNames="true">
    <variable name="CN" expression="classNameComplete()" defaultValue="" alwaysStopAt="true" />
    <variable name="CFN" expression="decapitalize(String)" defaultValue="" alwaysStopAt="true" />
    <variable name="CMN" expression="camelCase(String)" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ali2-add-new-form" value="&lt;form class=&quot;form-horizontal&quot; role=&quot;form&quot; (ngSubmit)=&quot;this.onSubmitNew()&quot; #addNew$CN$Form=&quot;ngForm&quot; id=&quot;addNew$CN$Form&quot; *ngIf=&quot;this.active&quot;&gt;&#10;    &lt;div class=&quot;form-body&quot;&gt;&#10;    &#10;        &lt;div [class.has-error]=&quot;!$CFN$.valid&quot; class=&quot;form-group form-md-line-input&quot;&gt;&#10;            &lt;label for=&quot;$CFN$&quot; class=&quot;col-md-3 control-label&quot; i18n&gt;$FN$&lt;/label&gt;&#10;            &lt;div class=&quot;col-md-7&quot;&gt;&#10;                &lt;input id=&quot;$CFN$&quot;&#10;                       type=&quot;text&quot;&#10;                       required&#10;                       [(ngModel)]=&quot;this.$MN$Model.$CFN$&quot; &#10;                       name=&quot;$CFN$&quot;&#10;                       #$CFN$=&quot;ngModel&quot;&#10;                       class=&quot;form-control&quot;&gt;&#10;                &lt;div class=&quot;form-control-focus&quot;&gt;&lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt; &#10;&#10;    &lt;/div&gt;&#10;    &lt;div class=&quot;form-actions&quot;&gt;&#10;        &lt;div class=&quot;row&quot;&gt;&#10;            &lt;div class=&quot;col-md-offset-3 col-md-7&quot;&gt;&#10;                &lt;button type=&quot;submit&quot; class=&quot;btn green&quot; [disabled]=&quot;!addNew$CN$Form.form.valid || this.submitted&quot;&#10;                    *ngIf=&quot;this.$MN$Model.id&gt;0&quot; i18n&gt;Değişiklikleri Kaydet&lt;/button&gt;&#10;                &lt;button type=&quot;submit&quot; class=&quot;btn green&quot; [disabled]=&quot;!addNew$CN$Form.form.valid || this.submitted&quot;&#10;                    *ngIf=&quot;this.$MN$Model.id==null&quot; i18n&gt;Ekle&lt;/button&gt;&#10;                &lt;a (click)=&quot;goBack()&quot; class=&quot;btn default&quot; i18n&gt;İptal&lt;/a&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/form&gt;$END$" description="Add-New From HTML: x-add-new.component.html" toReformat="false" toShortenFQNames="true">
    <variable name="CN" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CFN" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MN" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="FN" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="ali2-list-html" value="&lt;table class=&quot;table table-striped table-bordered table-hover dt-responsive order-column&quot;&#10;       id=&quot;$CMN$s_table&quot; [hidden]=&quot;!this.active&quot;&gt;&#10;    &lt;thead&gt;&#10;    &lt;tr&gt;&#10;        &lt;th class=&quot;all&quot;&gt;#&lt;/th&gt;&#10;        &lt;th class=&quot;all&quot; i18n&gt;$MHeader$&lt;/th&gt;&#10;        &lt;th class=&quot;all&quot; i18n&gt;İşlemler&lt;/th&gt;&#10;    &lt;/tr&gt;&#10;    &lt;/thead&gt;&#10;    &lt;tbody&gt;&#10;    &lt;tr *ngFor='let $CMN$ of $CMN$s; let ri = index;'&gt;&#10;        &lt;td&gt;{{$CMN$.id}}&lt;/td&gt;&#10;        &lt;td&gt;{{$CMN$.name}}&lt;/td&gt;&#10;        &lt;td&gt;&lt;a routerLink=&quot;../add-new/{{$CMN$.id}}&quot; class=&quot;btn btn-circle btn-icon-only btn-default&quot;&gt;&#10;                &lt;i class=&quot;icon-pencil&quot;&gt;&lt;/i&gt;&lt;/a&gt;&#10;            &lt;a (click)=&quot;delete($CMN$.id, ri)&quot; [id]=&quot;'tdb_'+ri&quot;&#10;                class=&quot;btn btn-circle btn-icon-only btn-default icon-right&quot;&gt;&#10;                    &lt;i class=&quot;icon-trash&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;&#10;    &lt;/tr&gt;&#10;    &lt;/tbody&gt;&#10;&lt;/table&gt;$END$" description="List HTML: x-list.component.html" toReformat="false" toShortenFQNames="true">
    <variable name="CMN" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MHeader" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="ali2-list-comp" value="import {Component, OnInit} from '@angular/core';&#10;import {appConfigs,HTTP_Responses} from &quot;../app.config&quot;;&#10;&#10;import {&#10;    $CN$,&#10;    $CN$Service&#10;} from './$CFN$.service';&#10;&#10;declare var Spinner, jQuery, UIToastr, $: any;&#10;&#10;@Component({&#10;    moduleId: module.id,&#10;    templateUrl: '$CFN$-list.component.html'&#10;})&#10;export class $CN$ListComponent implements OnInit {&#10;&#10;    dataTableObject: any;&#10;&#10;    constructor(private $CMN$Service: $CN$Service) {&#10;    }&#10;&#10;    active = false;&#10;    $CMN$s: $CN$[];&#10;&#10;    ngOnInit() {&#10;        this.refresh$CN$s();&#10;    }&#10;&#10;    ngAfterViewInit() {&#10;&#10;    }&#10;&#10;    refresh$CN$s() {&#10;        Spinner.show();&#10;        this.$CMN$Service.get$CN$s().subscribe(&#10;            response =&gt; {&#10;                console.log(response);&#10;                this.$CMN$s = response;&#10;                setTimeout(()=&gt; this.tableInit(), 100);&#10;            },&#10;            _ =&gt; {},&#10;            () =&gt; Spinner.hide()&#10;        );&#10;    }&#10;&#10;    tableInit() {&#10;        this.active = true;&#10;&#10;        if (!$.fn.DataTable.isDataTable('#$CMN$s_table')) {&#10;          this.dataTableObject = $('#$CMN$s_table').DataTable({&#10;                language: {&#10;                    url: '/locale/datatable-locale.' + appConfigs.currentLocale +'.json'&#10;                },&#10;                bStateSave: false,&#10;                pagingType: 'bootstrap_extended',&#10;                lengthMenu: [&#10;                    [20, 50, -1],&#10;                    [20, 50, 'All']&#10;                ],&#10;                pageLength: 20,&#10;                columnDefs: [{&#10;                    orderable: false,&#10;                    targets: [0, 2]&#10;                }, {&#10;                    searchable: false,&#10;                    targets: [0, 2]&#10;                }],&#10;                order: [&#10;                    [1, 'asc']&#10;                ]&#10;            });&#10;        }&#10;            &#10;&#10;    }&#10;    &#10;    private delete(id: number, rowindex: number) {&#10;        Spinner.show();&#10;        this.$CMN$Service.delete$CN$(id).subscribe(&#10;            () =&gt; {&#10;                Spinner.hide();&#10;                UIToastr.info(&quot;Silindi&quot;);&#10;                this.dataTableObject.row($('#tdb_' + rowindex).parents('tr')).remove().draw();&#10;            },&#10;            err =&gt; {&#10;                Spinner.hide();&#10;                if (err.status == HTTP_Responses.HTTP_FORBIDDEN) UIToastr.warn(&quot;Önceden kullanıldığı için veya ilişkili olduğu için silinemiyor.&quot;);&#10;                else UIToastr.error(err);&#10;            }&#10;        );&#10;    }&#10;&#10;}$END$" description="List Component: x-list.component.ts" toReformat="false" toShortenFQNames="true">
    <variable name="CN" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CFN" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CMN" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ali2-input" value="&lt;div [class.has-error]=&quot;!$CFN$.valid&quot; class=&quot;form-group form-md-line-input&quot;&gt;&#10;    &lt;label for=&quot;$CFN$&quot; class=&quot;col-md-3 control-label&quot; i18n&gt;$FN$&lt;/label&gt;&#10;    &lt;div class=&quot;col-md-7&quot;&gt;&#10;        &lt;input id=&quot;$CFN$&quot;&#10;               type=&quot;text&quot;&#10;               required&#10;               [(ngModel)]=&quot;this.$MN$Model.$CFN$&quot; &#10;               name=&quot;$CFN$&quot;&#10;               #$CFN$=&quot;ngModel&quot;&#10;               class=&quot;form-control&quot;&gt;&#10;        &lt;div class=&quot;form-control-focus&quot;&gt;&lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;&#10;$END$" description="HTML Input" toReformat="false" toShortenFQNames="true">
    <variable name="CFN" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MN" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="FN" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="ali2-select" value="&lt;div [class.has-error]=&quot;!$CFN$.valid&quot; class=&quot;form-group form-md-line-input&quot;&gt;&#10;    &lt;label for=&quot;$CFN$&quot; class=&quot;col-md-3 control-label&quot; i18n&gt;$FN$&lt;/label&gt;&#10;    &lt;div class=&quot;col-md-7&quot;&gt;&#10;        &lt;select id=&quot;$CFN$&quot;&#10;               required&#10;               [(ngModel)]=&quot;this.$MN$Model.$CFN$&quot; &#10;               name=&quot;$CFN$&quot;&#10;               #$CFN$=&quot;ngModel&quot;&#10;               class=&quot;form-control&quot;&gt;&#10;            &lt;option *ngFor=&quot;let i_$CFN$ of $CFC$&quot; [value]=&quot;i_$CFN$.id&quot;&gt;{{i_$CFN$.name}}&lt;/option&gt;&#10;        &lt;/select&gt;&#10;        &lt;div class=&quot;form-control-focus&quot;&gt;&lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;&#10;$END$" description="HTML Select" toReformat="false" toShortenFQNames="true">
    <variable name="CFN" expression="decapitalize(String)" defaultValue="name" alwaysStopAt="true" />
    <variable name="MN" expression="camelCase(String)" defaultValue="modelName" alwaysStopAt="true" />
    <variable name="CFC" expression="" defaultValue="optionset" alwaysStopAt="true" />
    <variable name="FN" expression="" defaultValue="Field Name" alwaysStopAt="true" />
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="ali2-routeObject" value="{path: '$CFN$s', loadChildren: 'dist/$CFN$/$CFN$.module#$CCN$Module', canActivate: [LoginService]}$END$" description="Route object for app-routing module" toReformat="false" toShortenFQNames="true">
    <variable name="CFN" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="CCN" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="con" value="console.log($LOG$)$END$" description="console.log()" toReformat="false" toShortenFQNames="true">
    <variable name="LOG" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ali2-mainhtml" value="&lt;div class=&quot;row&quot;&gt;&#10;    &lt;div class=&quot;portlet light portlet-form portlet-fit bordered&quot;&gt;&#10;        &lt;div class=&quot;portlet-title&quot;&gt;&#10;            &lt;div class=&quot;caption&quot;&gt;&#10;                &lt;span class=&quot;caption-subject font-grey-salsa bold uppercase&quot; i18n&gt;$HEAD$&lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;div class=&quot;actions&quot;&gt;&#10;                &lt;div class=&quot;actions&quot;&gt;&#10;                    &lt;a routerLink=&quot;list&quot; routerLinkActive=&quot;active&quot; class=&quot;btn btn-circle btn-default&quot; i18n&gt;&#10;                        &lt;i class=&quot;fa fa-list&quot;&gt;&lt;/i&gt; Liste&lt;/a&gt;&#10;                    &lt;a routerLink=&quot;add-new&quot; routerLinkActive=&quot;active&quot; class=&quot;btn btn-circle btn-default&quot; i18n&gt;&#10;                        &lt;i class=&quot;fa fa-plus&quot;&gt;&lt;/i&gt; Ekle&lt;/a&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;portlet-body&quot;&gt;&#10;            &lt;router-outlet&gt;&lt;/router-outlet&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;$END$" description="Main HTML: x.component.html" toReformat="false" toShortenFQNames="true">
    <variable name="HEAD" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="ali2-datepicker" value="&lt;div class=&quot;form-group&quot;&gt;&#10;    &lt;label class=&quot;control-label col-md-3&quot;&gt;$LABEL$&lt;/label&gt;&#10;    &lt;div class=&quot;col-md-3&quot;&gt;&#10;        &lt;input class=&quot;form-control form-control-inline input-medium date-picker&quot; data-date-format=&quot;dd-mm-yyyy&quot;&#10;               data-date-start-date=&quot;+0d&quot; size=&quot;16&quot; type=&quot;text&quot; value=&quot;&quot; placeholder=&quot;dd-mm-yyyy&quot;/&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;&#10;$END$" description="HTML for JQuery Datepicker" toReformat="false" toShortenFQNames="true">
    <variable name="LABEL" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="conjson" value="console.log(JSON.stringify($LOG$));$END$" description="console.log(JSON.stringfy)" toReformat="false" toShortenFQNames="true">
    <variable name="LOG" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ali2-checkbox" value="&lt;div class=&quot;form-group form-md-line-input md-checkbox&quot;&gt;&#10;    &lt;div class=&quot;col-md-2&quot;&gt;&#10;    &lt;/div&gt;&#10;    &lt;div class=&quot;col-md-6 checkbox-container&quot;&gt;&#10;        &lt;input id=&quot;$CFN$&quot;&#10;                       type=&quot;checkbox&quot;&#10;                       [(ngModel)]=&quot;this.$MN$Model.$CFN$&quot;&#10;                       name=&quot;$CFN$&quot;&#10;                       #$CFN$=&quot;ngModel&quot;&#10;                       class=&quot;md-check&quot;&gt;&#10;        &lt;label for=&quot;$CFN$&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;check&quot;&gt;&lt;/span&gt;&lt;span class=&quot;box&quot;&gt;&lt;/span&gt;&#10;            &lt;i i18n&gt;$FN$&lt;/i&gt;&lt;/label&gt;&#10;    &lt;/div&gt;&#10;&lt;/div&gt;&#10;&#10;$END$" description="HTML Checkbox" toReformat="false" toShortenFQNames="true">
    <variable name="CFN" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="MN" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="FN" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="ali2-multilang-html" value="&lt;!-- MULTILANG --&gt;&#10;        &lt;div class=&quot;row&quot; *ngFor=&quot;let i_lang of langNumbers&quot;&#10;             [id]=&quot;'langDiv' + i_lang&quot; [hidden]=&quot;i_lang&gt;0&quot;&gt;&#10;&#10;            &lt;div class=&quot;form-group form-md-line-input&quot;&gt;&#10;                &lt;div class=&quot;col-md-offset-3 col-md-2&quot;&gt;&#10;                    &lt;select [id]=&quot;'language' + i_lang&quot;&#10;                            type=&quot;text&quot;&#10;                            class=&quot;form-control&quot;&gt;&#10;                        &lt;option *ngFor=&quot;let i_language of languages; let li = index;&quot; [value]=&quot;i_language[0]&quot;&#10;                                [selected]=&quot;li==i_lang&quot;&gt;{{i_language[1]}}&#10;                        &lt;/option&gt;&#10;                    &lt;/select&gt;&#10;                &lt;/div&gt;&#10;                &lt;div class=&quot;col-md-2&quot;&gt;&#10;                    &lt;button [class.btn-invisible]=&quot;i_lang==0&quot; [disabled]=&quot;i_lang==0&quot;&#10;                            (click)=&quot;deleteTranslation($event)&quot; [value]=&quot;i_lang&quot;&#10;                            class=&quot;btn red-intense&quot; type=&quot;button&quot;&#10;                            i18n&gt;Sil&#10;                    &lt;/button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div class=&quot;form-group form-md-line-input&quot;&gt;&#10;                &lt;label [for]=&quot;'name' + i_lang&quot; class=&quot;col-md-3 control-label&quot; i18n&gt;Adı&lt;/label&gt;&#10;                &lt;div class=&quot;col-md-7&quot;&gt;&#10;                    &lt;input [id]=&quot;'name' + i_lang&quot;&#10;                           type=&quot;text&quot;&#10;                           class=&quot;form-control&quot;&gt;&#10;                    &lt;div class=&quot;form-control-focus&quot;&gt;&lt;/div&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;            &#10;        &lt;/div&gt;&#10;        &lt;div class=&quot;row&quot; id=&quot;add_translation_button&quot; [hidden]=&quot;!(this.langCount &lt; this.languages.length)&quot;&gt;&#10;            &lt;div class=&quot;col-md-offset-3 col-md-2&quot;&gt;&#10;                &lt;a (click)=&quot;addTranslation()&quot; class=&quot;btn yellow-soft btn-xs&quot; i18n&gt;+ Çeviri Ekle&lt;/a&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&lt;!-- END MULTILANG --&gt;&#10;&#10;$END$" description="HTML Input" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="ali2-multilang-ts" value="currentLocale = appConfigs.currentLocale&#10;languages: any = null;&#10;langCount: number = 1;&#10;langNumbers: Number[];&#10;&#10;//MOVE TO CONSTRUCTURE&#10;// this.languages = appConfigs.languages;&#10;// this.langNumbers = Array.from(Array(this.languages.length), (x, i)=&gt;i);&#10;&#10;//MOVE TO GET DETAIL&#10;//     this.langCount = Object.keys(response.name).length;&#10;//     setTimeout(()=&gt; {&#10;//     var i = 0;&#10;//     for (var index in response.name) {&#10;//     $(&quot;#language&quot; + i).val(index);&#10;//     $(&quot;#name&quot; + i).val(response.name[index]);&#10;//     $(&quot;#langDiv&quot; + i).removeAttr('hidden');&#10;//     i++;&#10;// }&#10;// }, 200);&#10;&#10;//MOVE TO SUBMIT&#10;//     var name = {}&#10;//&#10;//     $('div[id^=&quot;langDiv&quot;]').each(function (index) {&#10;//     if (!$(this).attr('hidden') &amp;&amp; $(&quot;#name&quot; + index).val() != &quot;&quot;) {&#10;//         name[$(&quot;#language&quot; + index).val()] = $(&quot;#name&quot; + index).val();&#10;//     }&#10;// });&#10;//&#10;//     this.$END$Model.name = JSON.stringify(name)&#10;&#10;addTranslation() {&#10;    if (this.langCount &lt; this.languages.length) {&#10;        this.langCount++;&#10;        $('div[id^=&quot;langDiv&quot;]').each(function (index) {&#10;            if ($(this).attr('hidden')) {&#10;                $(this).removeAttr('hidden');&#10;                return false;&#10;            }&#10;        });&#10;    }&#10;}&#10;&#10;deleteTranslation(_event) {&#10;    $(&quot;#langDiv&quot; + _event.target.value).attr('hidden', true);&#10;    this.langCount--;&#10;}&#10;" description="TS Content for Multilang" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ali2-checkbox-multiple" value="&lt;div class=&quot;col-md-12 checkbox-container&quot;&gt;&#10;                                    &lt;input id=&quot;$ID$&quot; type=&quot;checkbox&quot; class=&quot;md-check&quot;&gt;&#10;                                    &lt;label for=&quot;$ID$&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&quot;check&quot;&gt;&lt;/span&gt;&lt;span&#10;                                            class=&quot;box&quot;&gt;&lt;/span&gt;&#10;                                        &lt;i i18n&gt;$NAME$&lt;/i&gt;&lt;/label&gt;&#10;                                &lt;/div&gt;$END$" toReformat="false" toShortenFQNames="true">
    <variable name="ID" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
</templateSet>